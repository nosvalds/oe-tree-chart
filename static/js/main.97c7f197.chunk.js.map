{"version":3,"sources":["axios/axios.js","components/Chart.js","App.js","data/api.js","serviceWorker.js","index.js"],"names":["axios","create","baseURL","headers","Accept","Chart","chartData","className","data","width","height","options","maintainAspectRatio","title","display","text","fontSize","fontColor","legend","position","labels","scales","yAxes","type","time","unit","App","props","state","loaded","this","getChartData","get","then","treeData","reduce","result","event","dateTime","Date","createdAt","dateStr","getFullYear","getMonth","getDate","value","hasOwnProperty","formatTreeData","setState","Object","keys","map","day","datasets","label","values","backgroundColor","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"kNAEeA,E,OAAAA,EAAMC,OAAO,CAC1BC,QAAS,iCACTC,QAAS,CACPC,OAAQ,sB,gBCkCGC,EApCD,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UACb,OACI,yBAAKC,UAAU,SACX,kBAAC,IAAD,CACIC,KAAOF,EACPG,MAAQ,IACRC,OAAS,IACTC,QAAS,CACLC,qBAAqB,EACrBC,MAAO,CACHC,SAAS,EACTC,KAAM,wBACNC,SAAU,GACVC,UAAW,QAEfC,OAAQ,CACJJ,SAAS,EACTK,SAAU,MACVC,OAAQ,CACJH,UAAW,SAGnBI,OAAQ,CACJC,MAAO,CAAC,CACJC,KAAM,OACNC,KAAM,CACFC,KAAM,e,gBC6BvBC,E,kDAnDb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXC,QAAQ,EACRvB,UAAW,IALI,E,gEAUjBwB,KAAKC,iB,qCAGS,IAAD,OACb/B,EAAMgC,IAAI,IAAIC,MAAK,YAAe,IAC5BC,ECtBoB,SAAC1B,GAO3B,OAAOA,EAAK2B,QAAO,SAACC,EAAQC,GACxB,IAAIC,EAAW,IAAIC,KAAKF,EAAMG,WAC1BC,EAAO,UAAMH,EAASI,cAAf,YAAgCJ,EAASK,WAAa,EAAtD,YAA2DL,EAASM,WAC3EC,EAAQR,EAAMQ,MAElB,OAAO,2BAAIT,GAAX,kBACKK,EAAUL,EAAOU,eAAeL,GACjCL,EAAOK,GAAWI,EAChBA,MAER,IDKeE,CADgB,EAAXvC,MAGpB,EAAKwC,SAAS,CACZnB,QAAQ,EACRvB,UAAW,CACTc,OAAQ6B,OAAOC,KAAKhB,GAAUiB,KAAI,SAACC,GAAD,OAAS,IAAIb,KAAKa,MACpDC,SAAU,CACR,CACEC,MAAO,gBACP9C,KAAMyC,OAAOM,OAAOrB,GACpBsB,gBAAiB,oB,+BAQnB,IAAD,EACuB1B,KAAKF,MAA3BC,EADD,EACCA,OAAQvB,EADT,EACSA,UAEhB,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,6CAEAsB,EACA,kBAAC,EAAD,CAAOvB,UAAYA,IAEnB,8C,GA7CQmD,aEMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.97c7f197.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport default axios.create({\n  baseURL: \"https://api.offset.earth/trees\", // url \n  headers: {\n    Accept: \"application/json\",\n  }\n})","import React from 'react';\nimport { HorizontalBar } from 'react-chartjs-2'\n\nconst Chart = ({ chartData }) => {\n    return (\n        <div className=\"chart\">\n            <HorizontalBar\n                data={ chartData }\n                width={ 600 }\n                height={ 5000 }\n                options={{\n                    maintainAspectRatio: false,\n                    title: {\n                        display: true,\n                        text: \"Trees planted per day\",\n                        fontSize: 30,\n                        fontColor: '#000'\n                    },\n                    legend: {\n                        display: false, // legend\n                        position: \"top\",\n                        labels: {\n                            fontColor: '#000',\n                        }\n                    },\n                    scales: {\n                        yAxes: [{\n                            type: 'time',\n                            time: {\n                                unit: 'day',\n                            }\n                        }]\n                    }\n                }}\n            />\n        </div>\n    )\n}\n\nexport default Chart;","import React, { Component } from 'react';\nimport axios from './axios/axios';\nimport './App.css';\nimport Chart from './components/Chart';\nimport { formatTreeData } from './data/api';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      loaded: false,\n      chartData: []\n    };\n  }\n\n  componentDidMount(){\n    this.getChartData();\n  }\n\n  getChartData() {\n    axios.get(\"\").then(({ data }) => {\n      let treeData = formatTreeData(data);\n\n      this.setState({\n        loaded: true,\n        chartData: {\n          labels: Object.keys(treeData).map((day) => new Date(day)),\n          datasets: [\n            {\n              label: \"Trees Planted\",\n              data: Object.values(treeData),\n              backgroundColor: '#43C185',\n              // barThickness: 1,\n            }\n        ]}\n      });\n    });\n  }\n  \n  render() {\n    const { loaded, chartData } = this.state;\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Tree Tracker</h1>\n        </header>\n        { loaded ? \n          <Chart chartData={ chartData } />\n          :\n          <p>Loading...</p>\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","export const formatTreeData = (data) => {\n    // need to run through the data and get the total sum of trees per day and then put it in a format that Chart.js understands. \n    // first I want to get it into this format:\n    // result = {\n    //     \"YYYY-MM-DD\": numTrees,\n    //     \"YYYY-MM-DD\": numTrees,\n    // }\n    return data.reduce((result, event) => {\n        let dateTime = new Date(event.createdAt);\n        let dateStr = `${dateTime.getFullYear()}-${dateTime.getMonth() + 1}-${dateTime.getDate()}`\n        let value = event.value\n\n        return {...result, \n            [dateStr]: result.hasOwnProperty(dateStr) ? \n            result[dateStr] + value \n            : value\n        }\n    },{})\n} ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}