{"version":3,"sources":["axios/axios.js","components/Chart.js","components/DateFilter.js","App.js","data/api.js","serviceWorker.js","index.js"],"names":["axios","create","baseURL","headers","Accept","Chart","chartData","chartOptions","className","data","options","DateFilter","initStartDate","initEndDate","onApply","useState","Date","startDate","setStartDate","endDate","setEndDate","selected","onChange","date","selectsStart","selectsEnd","minDate","onClick","App","props","state","loaded","treeData","handleFilter","bind","this","getChartData","get","then","reduce","result","event","dateTime","createdAt","dateStr","getFullYear","getMonth","getDate","value","hasOwnProperty","formatTreeData","days","Object","keys","map","day","setState","length","labels","datasets","label","values","backgroundColor","filteredDates","filter","title","display","text","fontSize","fontColor","scales","yAxes","type","time","unit","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f9141455.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport default axios.create({\n  baseURL: \"https://api.offset.earth/trees\", // base API url \n  headers: {\n    Accept: \"application/json\",\n  }\n})","import React from 'react';\nimport { HorizontalBar } from 'react-chartjs-2'\n\nconst Chart = ({ chartData, chartOptions }) => {\n    return (\n        <div className=\"chart\">\n            <HorizontalBar\n                data={ chartData }\n                options={ chartOptions }\n            />\n        </div>\n    )\n}\n\nexport default Chart;","import React, { useState } from 'react';\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\"\n\nconst DateFilter = ({ initStartDate, initEndDate, onApply }) =>  {\n    const [startDate, setStartDate] = useState(new Date(initStartDate));\n    const [endDate, setEndDate] = useState(new Date(initEndDate));\n\n  return (\n    <>\n        <h3>Date Range Filter</h3>\n        <DatePicker\n        selected={startDate}\n        onChange={date => setStartDate(date)}\n        selectsStart\n        startDate={startDate}\n        endDate={endDate}\n        />\n        <DatePicker\n        selected={endDate}\n        onChange={date => setEndDate(date)}\n        selectsEnd\n        startDate={startDate}\n        endDate={endDate}\n        minDate={startDate}\n        />\n        <button\n        onClick={ () => onApply(startDate, endDate) }\n        >\n        Apply\n        </button>\n    </>\n  );\n}\n\nexport default DateFilter;","import React, { Component } from 'react';\nimport axios from './axios/axios';\nimport './App.css';\nimport Chart from './components/Chart';\nimport { formatTreeData } from './data/api';\nimport DateFilter from './components/DateFilter';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      loaded: false,\n      treeData: {},\n      chartData: [],\n      startDate: \"\",\n      endDate: \"\",\n    };\n\n    this.handleFilter = this.handleFilter.bind(this);\n  }\n\n  // called immediately after component mounts\n  componentDidMount(){\n    this.getChartData();\n  }\n\n  getChartData() {\n    // GET request for trees data\n    axios.get(\"\").then(({ data }) => {\n      // call out to helper function to get data into trees/day format\n      let treeData = formatTreeData(data);\n\n      // set state with format for Chart.js\n      // set loaded = true since we have data to display the Chart component now\n\n      let days = Object.keys(treeData).map((day) => new Date(day)) // array of dates \n\n      this.setState({\n        loaded: true,\n        treeData,\n        startDate: days[days.length - 1], \n        endDate: days[0],\n        chartData: {\n          labels: days, \n          \n          datasets: [\n            {\n              label: \"Trees Planted\",\n              data: Object.values(treeData), // array of number of trees for each date\n              backgroundColor: '#43C185',\n            }\n        ]},\n        \n      });\n    });\n  }\n\n  handleFilter(startDate, endDate) {\n    let treeData = {...this.state.treeData};\n    let filteredDates = Object.keys(treeData).map((day) => new Date(day)).filter((date) => (startDate <= date && endDate >= date ));\n    this.setState({\n      chartData: {\n        labels: filteredDates,\n        datasets: [\n          {\n            label: \"Trees Planted\",\n            data: filteredDates.map((date) => {\n              let dateStr = `${date.getFullYear()}-${date.getMonth() + 1}-${date.getDate()}`;\n              return treeData[dateStr];\n            }),\n            backgroundColor: '#43C185',\n          }\n        ]\n      }\n    });\n  }\n  \n  render() {\n    const { loaded, chartData, startDate, endDate } = this.state;\n\n    // Chart.js chart configuration options\n    const chartOptions = {\n      // maintainAspectRatio: true,\n      title: {\n          display: true,\n          text: \"Trees planted per day\",\n          fontSize: 30,\n          fontColor: '#000'\n      },\n      scales: {\n          yAxes: [{\n              type: 'time',\n              time: {\n                  unit: 'day',\n              }\n          }]\n      }\n  }\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Reforestation Efforts</h1>\n        </header>\n        {/* show loading message until we have the chart data in state */}\n        { loaded ? \n          <>\n            <DateFilter \n              initStartDate={ startDate }\n              initEndDate={ endDate }\n              onApply={(startDate, endDate) => this.handleFilter(startDate, endDate)}\n            />\n            <Chart \n              chartData={ chartData } \n              chartOptions={ chartOptions }\n            />\n          </>\n          :\n          <p>Loading...</p>\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","export const formatTreeData = (data) => {\n    // need to run through the data and get the total sum of trees per day and then put it in a format that Chart.js understands. \n    // first I want to get it into this format:\n    // result = {\n    //     \"YYYY-MM-DD\": numTrees,\n    //     \"YYYY-MM-DD\": numTrees,\n    // }\n    return data.reduce((result, event) => {\n        let dateTime = new Date(event.createdAt);\n        let dateStr = `${dateTime.getFullYear()}-${dateTime.getMonth() + 1}-${dateTime.getDate()}`\n        let value = event.value\n\n        return {...result, \n            [dateStr]: result.hasOwnProperty(dateStr) ? \n            result[dateStr] + value \n            : value\n        }\n    },{})\n} ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}